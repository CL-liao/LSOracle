#ifdef ENABLE_OPENSTA
#ifdef ENABLE_ABC

#include "budget.hpp"

namespace oracle
{

class ndp_aig_optimizer: optimizer<mockturtle::mig_network, node_depth>
{
    std::tuple<mockturtle::mig_network, node_depth> optimize(
        partition_view<mockturtle::mig_network> part)
    {
        oracle::aig_script aigopt;
        auto opt_aig = *mig_to_aig(part);
        opt_aig = aigopt.run(opt_aig);
        mockturtle::depth_view part_aig_opt_depth{opt_aig};
        int aig_opt_size = opt_aig.num_gates();
        int aig_opt_depth = part_aig_opt_depth.depth();
        auto opt_aig_mig = *aig_to_mig(opt_aig, 0);
        return std::tuple{opt_aig_mig, node_depth{aig_opt_size, aig_opt_depth}};
    }
};

class ndp_mig_optimizer: optimizer<mockturtle::mig_network, node_depth>
{
    std::tuple<mockturtle::mig_network, node_depth> optimize()
    {
        b        auto opt_mig = *part_to_mig(part, 0);
        oracle::mig_script migopt;
        opt_mig = migopt.run(opt_mig);
        mockturtle::depth_view part_mig_opt_depth{opt_mig};
        int mig_opt_size = opt_mig.num_gates();
        int mig_opt_depth = part_mig_opt_depth.depth();
        return std::tuple{opt_mig, node_depth{mig_opt_size, mig_opt_depth}};
    }
};

class noop_optimizer: optimizer<mockturtle::mig_network, node_depth>
{
    std::tuple<mockturtle::mig_network, node_depth> optimize()
    {
        auto opt_mig = *part_to_mig(part, 0);
        mockturtle::depth_view part_mig_opt_depth{opt_mig};
        int mig_opt_size = opt_mig.num_gates();
        int mig_opt_depth = part_mig_opt_depth.depth();
        return std::tuple{opt_mig, node_depth{mig_opt_size, mig_opt_depth}};
    }
};

string combine_verilog(std::vector<string> modules)
{
    throw 42;
}

template <typename network, typename metric>
optimizer<network, metric> optimize_area(partition_view<network> part)
{
    throw 42;
}

template <typename network>
string techmap(
    std::vector<optimizer<network, node_depth>> partitions,
    string liberty_file)
{

}

template <typename network> string optimize(network ntk,
        partition_manager<network> partitions,
        string liberty_file)
{
    int num_parts = partitions.get_part_num();
    std::vector<optimizer<network, node_depth>> optimized(num_parts);
    for (int i = 0; i < num_parts; i++) {
        partition_view<network> part = partitions.create_part(ntk, i);
        optimized[i] = optimize_area(part);
    }
    string verilog = techmap(optimized);
    size_t last_worst = -1;
    while (true) {
        auto result = run_timing(verilog);
        if (result.slack > 0) {
            break;
        }
        size_t worst_part = find_worst(partitions, optimized, result);
        if (worst_part != last_worst) {
            partition_view<network> part = partitions.create_part(ntk, i);
            optimized[worst_part.id()] = optimize_depth(part);
            last_worst = worst_part;
        }
        verilog = techmap(optimized);
    }
    return verilog;
}

mig_names budget_optimization(aig_names ntk_aig, part_man_aig partitions_aig)
{
    auto ntk_mig = *aig_to_mig(ntk_aig, 1);

    partition_manager<mig_names> partitions_mig(ntk_mig,
            partitions_aig.get_all_part_connections(),
            partitions_aig.get_all_partition_inputs(),
            partitions_aig.get_all_partition_outputs(),
            partitions_aig.get_all_partition_regs(),
            partitions_aig.get_all_partition_regin(), partitions_aig.get_part_num());
    return optimize(ntk_mig, partitions_mig);
}
}

#endif
#endif
